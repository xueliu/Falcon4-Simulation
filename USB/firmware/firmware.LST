C51 COMPILER V7.07   FIRMWARE                                                              03/10/2014 15:19:46 PAGE 1   


C51 COMPILER V7.07, COMPILATION OF MODULE FIRMWARE
OBJECT MODULE PLACED IN firmware.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE firmware.c BROWSE INCDIR(.\inc) DEBUG OBJECTEXTEND

stmt level    source

   1          #pragma NOIV               // Do not generate interrupt vectors
   2          //////////////////////////////////////////////////////////////////////////////////
   3          // 
   4          // Revision: 1.3 $
   5          // Date: 
   6          // Author: Xue Liu
   7          // For USB chip test
   8          // Firmware for Cypress USB controller
   9          //////////////////////////////////////////////////////////////////////////////////
  10          #include "fx2.h"
  11          #include "fx2regs.h"
  12          #include "fx2sdly.h"            // SYNCDELAY macro
  13          
  14          extern BOOL GotSUD;             // Received setup data flag
  15          extern BOOL Sleep;
  16          extern BOOL Rwuen;
  17          extern BOOL Selfpwr;
  18          
  19          BYTE Configuration;             // Current configuration
  20          BYTE AlternateSetting;          // Alternate settings
  21          
  22          BOOL done_frm_fpga = 0;
  23          
  24          #define VR_NAKALL_ON    0xD0
  25          #define VR_NAKALL_OFF   0xD1
  26          
  27          //-----------------------------------------------------------------------------
  28          // Task Dispatcher hooks
  29          //   The following hooks are called by the task dispatcher.
  30          //-----------------------------------------------------------------------------
  31          
  32          #define USE_EXTERNAL_CLOCK 0
  33          
  34          void TD_Init(void)             // Called once at startup
  35          {
  36   1      
  37   1              // Registers which require a synchronization delay, see section 15.14
  38   1              // FIFORESET        FIFOPINPOLAR
  39   1              // INPKTEND         OUTPKTEND
  40   1              // EPxBCH:L         REVCTL
  41   1              // GPIFTCB3         GPIFTCB2
  42   1              // GPIFTCB1         GPIFTCB0
  43   1              // EPxFIFOPFH:L     EPxAUTOINLENH:L
  44   1              // EPxFIFOCFG       EPxGPIFFLGSEL
  45   1              // PINFLAGSxx       EPxFIFOIRQ
  46   1              // EPxFIFOIE        GPIFIRQ
  47   1              // GPIFIE           GPIFADRH:L
  48   1              // UDMACRCH:L       EPxGPIFTRIG
  49   1              // GPIFTRIG
  50   1        
  51   1              // Note: The pre-REVE EPxGPIFTCH/L register are affected, as well...
  52   1              //      ...these have been replaced by GPIFTC[B3:B0] registers
  53   1      
  54   1              // set the CPU clock to 48MHz
  55   1              CPUCS = ((CPUCS & ~bmCLKSPD) | bmCLKSPD1 | bmCLKOE) ;
C51 COMPILER V7.07   FIRMWARE                                                              03/10/2014 15:19:46 PAGE 2   

  56   1      
  57   1              // set the slave FIFO interface to 48MHz
  58   1              // IFCLK pin is driven by the internal 48Mhz clock wth inverted polarity
  59   1      #if USE_EXTERNAL_CLOCK == 1
                      // 0111 0011 0x73 for external clock (original)
                      // 0100 0011 0x43 for external clock
                      IFCONFIG = 0x03; // 0000 0011   
              #else
  64   1              // 1111 0011 0xF3 for internal clock (original)
  65   1              IFCONFIG = 0xF3; //   
  66   1      #endif
  67   1      
  68   1                          // Bit      Value   Register    Function  
  69   1                          // bit.7    1       IFCLKSRC    0  : External clock on the IFCLK pin  
  70   1                          //                              1  : Internal 30 or 48MHz (default)  
  71   1                          // bit.6    1       3048MHZ     0  : 30M Hz  
  72   1                          //                              1  : 48M Hz  
  73   1                          // bit.5    1       IFCLKOE     0  : Tri-state  
  74   1                          //                              1  : Drive  
  75   1                          // bit.4    1       IFCLKOL     0  : clock not inverted  
  76   1                          //                              1  : clock is inverted  
  77   1                          // bit.3    0       ASYNC       0  : FIFO/GPIF operate synchronously  
  78   1                          //                              1  : FIFO/GPIF operate asynchronously  
  79   1                          // bit.2    0       GSTATE      1  : GPIF states, Port E Alternate Functions.  
  80   1                          //                                   PE0 GSTATE[0]  
  81   1                          //                                   PE1 GSTATE[1]  
  82   1                          //                                   PE2 GSTATE[2]  
  83   1                          // bit.1:0  11      IFCFG[1:0]  00 : Ports  
  84   1                          //                              01 : Reserved  
  85   1                          //                              10 : GPIF Interface (internal master)  
  86   1                          //                              11 : Slave FIFO Interface(external mast
  87   1      
  88   1              SYNCDELAY;
  89   1              REVCTL = 0x03;  // see TRM p.131
  90   1              SYNCDELAY;
  91   1      
  92   1        // default: all endpoints have their VALID bit set
  93   1        // default: TYPE1 = 1 and TYPE0 = 0 --> BULK  
  94   1        // default: EP2 and EP4 DIR bits are 0 (OUT direction)
  95   1        // default: EP6 and EP8 DIR bits are 1 (IN direction)
  96   1        // default: EP2, EP4, EP6, and EP8 are double buffered
  97   1      
  98   1              // configuration of endpoints
  99   1              // endpoint 1
 100   1              EP1OUTCFG       = 0xA0;
 101   1              EP1INCFG        = 0xA0;
 102   1              SYNCDELAY;                    // see TRM section 15.14
 103   1      
 104   1              // endpoint 2
 105   1              EP2CFG = 0xEA;  // 1110 1010, (Size = 1024, buf = Quad (Buf x4), BULK)  
 106   1                          // Bit      Value   Register    Function  
 107   1                          // bit.7    1       VALID       0  : Does not respond to any USB traffic.  
 108   1                          //                              1  : Activate an endpoint(default)  
 109   1                          // bit.6    1       DIR         0  : OUT  
 110   1                          //                              1  : IN  
 111   1                          // bit.5:4  10      TYPE[1:0]   0  : Invalid  
 112   1                          //                              01 : ISOCHRONOUS  
 113   1                          //                              10 : BULK (default)  
 114   1                          //                              11 : INTERRUPT  
 115   1                          // bit.3    1       SIZE        0  : 512 bytes  
 116   1                          //                              1  : 1024 bytes  
 117   1                          // bit.2    0       reserved  
C51 COMPILER V7.07   FIRMWARE                                                              03/10/2014 15:19:46 PAGE 3   

 118   1                          // bit.1:0  10      BUF[1:0]    00 : Quad  
 119   1                          //                              01 : Invalid  
 120   1                          //                              10 : Double  
 121   1                          //                              11 : Triple 
 122   1              SYNCDELAY;                    
 123   1      
 124   1              // endpoint 4 (disabled)
 125   1              EP4CFG = 0x62;
 126   1              SYNCDELAY;                    
 127   1      
 128   1              // endpoint 6
 129   1              EP6CFG = 0xAA;  // 1010 1010, (Size = 1024, buf = Quad (Buf x4), BULK)  
 130   1                          // Bit      Value   Register    Function  
 131   1                          // bit.7    1       VALID       0  : Does not respond to any USB traffic.  
 132   1                          //                              1  : Activate an endpoint(default)  
 133   1                          // bit.6    0       DIR         0  : OUT  
 134   1                          //                              1  : IN  
 135   1                          // bit.5:4  10      TYPE[1:0]   0  : Invalid  
 136   1                          //                              01 : ISOCHRONOUS  
 137   1                          //                              10 : BULK (default)  
 138   1                          //                              11 : INTERRUPT  
 139   1                          // bit.3    1       SIZE        0  : 512 bytes  
 140   1                          //                              1  : 1024 bytes  
 141   1                          // bit.2    0       reserved  
 142   1                          // bit.1:0  10      BUF[1:0]    00 : Quad  
 143   1                          //                              01 : Invalid  
 144   1                          //                              10 : Double  
 145   1                          //                              11 : Triple 
 146   1              SYNCDELAY;                    
 147   1      
 148   1              // endpoint 8 (disabled)
 149   1              EP8CFG = 0x62;
 150   1              SYNCDELAY;
 151   1      
 152   1              // reset all FIFOs
 153   1              FIFORESET = 0x80;
 154   1              SYNCDELAY;
 155   1      
 156   1              FIFORESET = 0x02;
 157   1              SYNCDELAY;
 158   1      
 159   1              FIFORESET = 0x04;
 160   1              SYNCDELAY;
 161   1      
 162   1              FIFORESET = 0x06;
 163   1              SYNCDELAY;
 164   1      
 165   1              FIFORESET = 0x08;
 166   1              SYNCDELAY;
 167   1      
 168   1              FIFORESET = 0x00;
 169   1              SYNCDELAY;
 170   1      
 171   1              // configure FIFOs for AUTOIN-mode
 172   1              EP2FIFOCFG = 0x4D;
 173   1                      // bit 6:       INFM1           == 0x01: assert full flag one sample earlier than when the full condition occurs
 174   1                      // bit 5:       OEP1            == 0x00
 175   1                      // bit 4:       AUTOOUT         == 0x00
 176   1                      // bit 3:       AUTOIN          == 0x01: incoming data is automatically packetized and transmitted, without CPU interv
             -ention
 177   1                      // bit 2:       ZEROLENIN       == 0x01: enable zero length IN packets
 178   1                      // bit 0:       WORDWIDE        == 0x01: 16 bit word width
C51 COMPILER V7.07   FIRMWARE                                                              03/10/2014 15:19:46 PAGE 4   

 179   1              SYNCDELAY;
 180   1      
 181   1              // configure FIFOs for AUTOOUT-mode
 182   1              EP6FIFOCFG = 0x55;
 183   1                      // bit.7    0 
 184   1                      // bit 6:       INFM1           == 0x01: assert full flag one sample earlier than when the full condition occurs
 185   1                      // bit 5:       OEP1            == 0x00
 186   1                      // bit 4:       AUTOOUT         == 0x01
 187   1                      // bit 3:       AUTOIN          == 0x00: incoming data is automatically packetized and transmitted, without CPU interv
             -ention
 188   1                      // bit 2:       ZEROLENIN       == 0x01: enable zero length IN packets
 189   1              // bit.1    0 
 190   1                      // bit 0:       WORDWIDE        == 0x01: 16 bit word width
 191   1      
 192   1              SYNCDELAY;
 193   1              EP6FIFOCFG = 0x4D;
 194   1              SYNCDELAY;
 195   1              PINFLAGSAB = 0x00;      // defines FLAGA as prog-level flag, pointed to by FIFOADR[1:0]
 196   1              SYNCDELAY;                      // FLAGB as full flag, as pointed to by FIFOADR[1:0]
 197   1              PINFLAGSCD = 0x00;      // FLAGC as empty flag, as pointed to by FIFOADR[1:0]
 198   1                                                      // won't generally need FLAGD
 199   1              PORTACFG = 0x00;        // used PA7/FLAGD as a port pin, not as a FIFO flag
 200   1              SYNCDELAY;
 201   1      
 202   1              // set block length to 1024 (only permitted for EP2 and EP6)
 203   1              EP2AUTOINLENH = 0x04;
 204   1              SYNCDELAY;
 205   1              EP2AUTOINLENL = 0x00;
 206   1              SYNCDELAY;
 207   1      
 208   1              EP6AUTOINLENH = 0x04;
 209   1              SYNCDELAY;
 210   1              EP6AUTOINLENL = 0x00;
 211   1              SYNCDELAY;
 212   1              
 213   1      //  Rwuen = TRUE;                 // Enable remote-wakeup
 214   1      }
 215          
 216          
 217          void TD_Poll(void)              // Called repeatedly while the device is idle
 218          {
 219   1              // this function is empty since the USB controller is operating in FIFO slave mode
 220   1      //              if(!(IOC & 0x02))
 221   1      //              {
 222   1      //                      done_frm_fpga = 1;
 223   1      //              }
 224   1      //              if ((done_frm_fpga) && (IOA & 0x80))
 225   1      //              {
 226   1      //                      IOC|=0x01; //output 1 on PC.3...SYNC signal is HIGH 
 227   1      //                      SYNCDELAY;
 228   1      //                      IOC|=0x00; //output 1 on PC.3...SYNC signal is HIGH 
 229   1      //                      SYNCDELAY;
 230   1      //                      // set again
 231   1      //                      PINFLAGSAB = 0x00;      // defines FLAGA as prog-level flag, pointed to by FIFOADR[1:0]
 232   1      //                      SYNCDELAY;                      // FLAGB as full flag, as pointed to by FIFOADR[1:0]
 233   1      //                      PINFLAGSCD = 0x00;      // FLAGC as empty flag, as pointed to by FIFOADR[1:0]
 234   1      //                                                              // won't generally need FLAGD
 235   1      //                      PORTACFG = 0x00;        // used PA7/FLAGD as a port pin, not as a FIFO flag
 236   1      //                      SYNCDELAY;
 237   1      //                      EP2FIFOCFG = 0x4D;
 238   1      //                      SYNCDELAY;
 239   1      //                      EP6FIFOCFG = 0x55;
C51 COMPILER V7.07   FIRMWARE                                                              03/10/2014 15:19:46 PAGE 5   

 240   1      //                      SYNCDELAY;                      
 241   1      //              }
 242   1      }
 243          
 244          BOOL TD_Suspend(void)          // Called before the device goes into suspend mode
 245          {
 246   1         return(TRUE);
 247   1      }
 248          
 249          BOOL TD_Resume(void)          // Called after the device resumes
 250          {
 251   1         return(TRUE);
 252   1      }
 253          
 254          //-----------------------------------------------------------------------------
 255          // Device Request hooks
 256          //   The following hooks are called by the end point 0 device request parser.
 257          //-----------------------------------------------------------------------------
 258          
 259          BOOL DR_GetDescriptor(void)
 260          {
 261   1         return(TRUE);
 262   1      }
 263          
 264          BOOL DR_SetConfiguration(void)   // Called when a Set Configuration command is received
 265          {
 266   1      // inserted recently
 267   1        if( EZUSB_HIGHSPEED( ) )
 268   1        { // ...FX2 in high speed mode
 269   2          EP2AUTOINLENH = 0x04;
 270   2          SYNCDELAY;
 271   2          EP6AUTOINLENH = 0x04;   // set core AUTO commit len = 512 bytes
 272   2          SYNCDELAY;
 273   2          EP2AUTOINLENL = 0x00;
 274   2          SYNCDELAY;
 275   2          EP6AUTOINLENL = 0x00;
 276   2        }
 277   1        else
 278   1        { // ...FX2 in full speed mode
 279   2          EP2AUTOINLENH = 0x00;
 280   2          SYNCDELAY;
 281   2          EP6AUTOINLENH = 0x00;   // set core AUTO commit len = 64 bytes
 282   2          SYNCDELAY;
 283   2          EP2AUTOINLENL = 0x40;
 284   2          SYNCDELAY;
 285   2          EP6AUTOINLENL = 0x40;
 286   2        }
 287   1         Configuration = SETUPDAT[2];
 288   1         return(TRUE);            // Handled by user code
 289   1      }
 290          
 291          BOOL DR_GetConfiguration(void)   // Called when a Get Configuration command is received
 292          {
 293   1         EP0BUF[0] = Configuration;
 294   1         EP0BCH = 0;
 295   1         EP0BCL = 1;
 296   1         return(TRUE);            // Handled by user code
 297   1      }
 298          
 299          BOOL DR_SetInterface(void)       // Called when a Set Interface command is received
 300          {
 301   1         AlternateSetting = SETUPDAT[2];
C51 COMPILER V7.07   FIRMWARE                                                              03/10/2014 15:19:46 PAGE 6   

 302   1         return(TRUE);            // Handled by user code
 303   1      }
 304          
 305          BOOL DR_GetInterface(void)       // Called when a Set Interface command is received
 306          {
 307   1         EP0BUF[0] = AlternateSetting;
 308   1         EP0BCH = 0;
 309   1         EP0BCL = 1;
 310   1         return(TRUE);            // Handled by user code
 311   1      }
 312          
 313          BOOL DR_GetStatus(void)
 314          {
 315   1         return(TRUE);
 316   1      }
 317          
 318          BOOL DR_ClearFeature(void)
 319          {
 320   1         return(TRUE);
 321   1      }
 322          
 323          BOOL DR_SetFeature(void)
 324          {
 325   1         return(TRUE);
 326   1      }
 327          
 328          BOOL DR_VendorCmnd(void)
 329          {
 330   1              return(FALSE);
 331   1      }
 332          
 333          //-----------------------------------------------------------------------------
 334          // USB Interrupt Handlers
 335          //   The following functions are called by the USB interrupt jump table.
 336          //-----------------------------------------------------------------------------
 337          
 338          // Setup Data Available Interrupt Handler
 339          void ISR_Sudav(void) interrupt 0
 340          {
 341   1         GotSUD = TRUE;            // Set flag
 342   1         EZUSB_IRQ_CLEAR();
 343   1         USBIRQ = bmSUDAV;         // Clear SUDAV IRQ
 344   1      }
 345          
 346          // Setup Token Interrupt Handler
 347          void ISR_Sutok(void) interrupt 0
 348          {
 349   1         EZUSB_IRQ_CLEAR();
 350   1         USBIRQ = bmSUTOK;         // Clear SUTOK IRQ
 351   1      }
 352          
 353          void ISR_Sof(void) interrupt 0
 354          {
 355   1         EZUSB_IRQ_CLEAR();
 356   1         USBIRQ = bmSOF;            // Clear SOF IRQ
 357   1      }
 358          
 359          void ISR_Ures(void) interrupt 0
 360          {
 361   1         // whenever we get a USB reset, we should revert to full speed mode
 362   1         pConfigDscr = pFullSpeedConfigDscr;
 363   1         ((CONFIGDSCR xdata *) pConfigDscr)->type = CONFIG_DSCR;
C51 COMPILER V7.07   FIRMWARE                                                              03/10/2014 15:19:46 PAGE 7   

 364   1         pOtherConfigDscr = pHighSpeedConfigDscr;
 365   1         ((CONFIGDSCR xdata *) pOtherConfigDscr)->type = OTHERSPEED_DSCR;
 366   1      
 367   1         EZUSB_IRQ_CLEAR();
 368   1         USBIRQ = bmURES;         // Clear URES IRQ
 369   1      }
 370          
 371          void ISR_Susp(void) interrupt 0
 372          {
 373   1         Sleep = TRUE;
 374   1         EZUSB_IRQ_CLEAR();
 375   1         USBIRQ = bmSUSP;
 376   1      }
 377          
 378          void ISR_Highspeed(void) interrupt 0
 379          {
 380   1         if (EZUSB_HIGHSPEED())
 381   1         {
 382   2            pConfigDscr = pHighSpeedConfigDscr;
 383   2            ((CONFIGDSCR xdata *) pConfigDscr)->type = CONFIG_DSCR;
 384   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 385   2            ((CONFIGDSCR xdata *) pOtherConfigDscr)->type = OTHERSPEED_DSCR;
 386   2         }
 387   1      
 388   1         EZUSB_IRQ_CLEAR();
 389   1         USBIRQ = bmHSGRANT;
 390   1      }
 391          void ISR_Ep0ack(void) interrupt 0
 392          {
 393   1      }
 394          void ISR_Stub(void) interrupt 0
 395          {
 396   1      }
 397          void ISR_Ep0in(void) interrupt 0
 398          {
 399   1      }
 400          void ISR_Ep0out(void) interrupt 0
 401          {
 402   1      }
 403          void ISR_Ep1in(void) interrupt 0
 404          {
 405   1      }
 406          void ISR_Ep1out(void) interrupt 0
 407          {
 408   1      }
 409          void ISR_Ep2inout(void) interrupt 0
 410          {
 411   1      }
 412          void ISR_Ep4inout(void) interrupt 0
 413          {
 414   1      }
 415          void ISR_Ep6inout(void) interrupt 0
 416          {
 417   1      }
 418          void ISR_Ep8inout(void) interrupt 0
 419          {
 420   1      }
 421          void ISR_Ibn(void) interrupt 0
 422          {
 423   1      }
 424          void ISR_Ep0pingnak(void) interrupt 0
 425          {
C51 COMPILER V7.07   FIRMWARE                                                              03/10/2014 15:19:46 PAGE 8   

 426   1      }
 427          void ISR_Ep1pingnak(void) interrupt 0
 428          {
 429   1      }
 430          void ISR_Ep2pingnak(void) interrupt 0
 431          {
 432   1      }
 433          void ISR_Ep4pingnak(void) interrupt 0
 434          {
 435   1      }
 436          void ISR_Ep6pingnak(void) interrupt 0
 437          {
 438   1      }
 439          void ISR_Ep8pingnak(void) interrupt 0
 440          {
 441   1      }
 442          void ISR_Errorlimit(void) interrupt 0
 443          {
 444   1      }
 445          void ISR_Ep2piderror(void) interrupt 0
 446          {
 447   1      }
 448          void ISR_Ep4piderror(void) interrupt 0
 449          {
 450   1      }
 451          void ISR_Ep6piderror(void) interrupt 0
 452          {
 453   1      }
 454          void ISR_Ep8piderror(void) interrupt 0
 455          {
 456   1      }
 457          void ISR_Ep2pflag(void) interrupt 0
 458          {
 459   1      }
 460          void ISR_Ep4pflag(void) interrupt 0
 461          {
 462   1      }
 463          void ISR_Ep6pflag(void) interrupt 0
 464          {
 465   1      }
 466          void ISR_Ep8pflag(void) interrupt 0
 467          {
 468   1      }
 469          void ISR_Ep2eflag(void) interrupt 0
 470          {
 471   1      }
 472          void ISR_Ep4eflag(void) interrupt 0
 473          {
 474   1      }
 475          void ISR_Ep6eflag(void) interrupt 0
 476          {
 477   1      }
 478          void ISR_Ep8eflag(void) interrupt 0
 479          {
 480   1      }
 481          void ISR_Ep2fflag(void) interrupt 0
 482          {
 483   1      }
 484          void ISR_Ep4fflag(void) interrupt 0
 485          {
 486   1      }
 487          void ISR_Ep6fflag(void) interrupt 0
C51 COMPILER V7.07   FIRMWARE                                                              03/10/2014 15:19:46 PAGE 9   

 488          {
 489   1      }
 490          void ISR_Ep8fflag(void) interrupt 0
 491          {
 492   1      }
 493          void ISR_GpifComplete(void) interrupt 0
 494          {
 495   1      }
 496          void ISR_GpifWaveform(void) interrupt 0
 497          {
 498   1      }
 499          
 500          //      $Log: not supported by cvs2svn $
 501          //      Revision 1.2  2008/11/11 11:10:07  kocks
 502          //      added preprocessor define for external struct
 503          //      
 504          //      Revision 1.1  2008/10/14 11:33:59  kocks
 505          //      *** empty log message ***
 506          //      
 507          //      Revision 1.2  2008/10/14 09:37:34  kocks
 508          //      cleaned up
 509          //      
 510          //      Revision 1.1  2008/10/14 09:11:06  kocks
 511          //      *** empty log message ***
 512          //      


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    559    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
