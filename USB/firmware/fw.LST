C51 COMPILER V7.07   FW                                                                    03/10/2014 15:19:46 PAGE 1   


C51 COMPILER V7.07, COMPILATION OF MODULE FW
OBJECT MODULE PLACED IN fw.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE fw.c BROWSE INCDIR(.\inc) DEBUG OBJECTEXTEND

stmt level    source

   1          //-----------------------------------------------------------------------------
   2          //   File:      fw.c
   3          //   Contents:   Firmware frameworks task dispatcher and device request parser
   4          //            source.
   5          //
   6          // indent 3.  NO TABS!
   7          //
   8          // $Revision: 1.1 $
   9          // $Date: 2008-10-14 11:33:59 $
  10          //
  11          //   Copyright (c) 1997 AnchorChips, Inc. All rights reserved
  12          //-----------------------------------------------------------------------------
  13          #include "fx2.h"
  14          #include "fx2regs.h"
  15          
  16          //-----------------------------------------------------------------------------
  17          // Constants
  18          //-----------------------------------------------------------------------------
  19          #define DELAY_COUNT   0x9248*8L  // Delay for 8 sec at 24Mhz, 4 sec at 48
  20          #define _IFREQ  48000            // IFCLK constant for Synchronization Delay
  21          #define _CFREQ  48000            // CLKOUT constant for Synchronization Delay
  22          
  23          //-----------------------------------------------------------------------------
  24          // Random Macros
  25          //-----------------------------------------------------------------------------
  26          #define   min(a,b) (((a)<(b))?(a):(b))
  27          #define   max(a,b) (((a)>(b))?(a):(b))
  28          
  29            // Registers which require a synchronization delay, see section 15.14
  30            // FIFORESET        FIFOPINPOLAR
  31            // INPKTEND         OUTPKTEND
  32            // EPxBCH:L         REVCTL
  33            // GPIFTCB3         GPIFTCB2
  34            // GPIFTCB1         GPIFTCB0
  35            // EPxFIFOPFH:L     EPxAUTOINLENH:L
  36            // EPxFIFOCFG       EPxGPIFFLGSEL
  37            // PINFLAGSxx       EPxFIFOIRQ
  38            // EPxFIFOIE        GPIFIRQ
  39            // GPIFIE           GPIFADRH:L
  40            // UDMACRCH:L       EPxGPIFTRIG
  41            // GPIFTRIG
  42            
  43            // Note: The pre-REVE EPxGPIFTCH/L register are affected, as well...
  44            //      ...these have been replaced by GPIFTC[B3:B0] registers
  45            
  46          #include "fx2sdly.h"             // Define _IFREQ and _CFREQ above this #include
  47          
  48          //-----------------------------------------------------------------------------
  49          // Global Variables
  50          //-----------------------------------------------------------------------------
  51          volatile BOOL   GotSUD;
  52          BOOL      Rwuen;
  53          BOOL      Selfpwr;
  54          volatile BOOL   Sleep;                  // Sleep mode enable flag
  55          
C51 COMPILER V7.07   FW                                                                    03/10/2014 15:19:46 PAGE 2   

  56          WORD   pDeviceDscr;   // Pointer to Device Descriptor; Descriptors may be moved
  57          WORD   pDeviceQualDscr;
  58          WORD   pHighSpeedConfigDscr;
  59          WORD   pFullSpeedConfigDscr;   
  60          WORD   pConfigDscr;
  61          WORD   pOtherConfigDscr;   
  62          WORD   pStringDscr;   
  63          
  64          //-----------------------------------------------------------------------------
  65          // Prototypes
  66          //-----------------------------------------------------------------------------
  67          void SetupCommand(void);
  68          void TD_Init(void);
  69          void TD_Poll(void);
  70          BOOL TD_Suspend(void);
  71          BOOL TD_Resume(void);
  72          
  73          BOOL DR_GetDescriptor(void);
  74          BOOL DR_SetConfiguration(void);
  75          BOOL DR_GetConfiguration(void);
  76          BOOL DR_SetInterface(void);
  77          BOOL DR_GetInterface(void);
  78          BOOL DR_GetStatus(void);
  79          BOOL DR_ClearFeature(void);
  80          BOOL DR_SetFeature(void);
  81          BOOL DR_VendorCmnd(void);
  82          
  83          // this table is used by the epcs macro 
  84          const char code  EPCS_Offset_Lookup_Table[] =
  85          {
  86             0,    // EP1OUT
  87             1,    // EP1IN
  88             2,    // EP2OUT
  89             2,    // EP2IN
  90             3,    // EP4OUT
  91             3,    // EP4IN
  92             4,    // EP6OUT
  93             4,    // EP6IN
  94             5,    // EP8OUT
  95             5,    // EP8IN
  96          };
  97          
  98          // macro for generating the address of an endpoint's control and status register (EPnCS)
  99          #define epcs(EP) (EPCS_Offset_Lookup_Table[(EP & 0x7E) | (EP > 128)] + 0xE6A1)
 100          
 101          //-----------------------------------------------------------------------------
 102          // Code
 103          //-----------------------------------------------------------------------------
 104          
 105          // Task dispatcher
 106          void main(void)
 107          {
 108   1         DWORD   i;
 109   1         WORD   offset;
 110   1         DWORD   DevDescrLen;
 111   1         DWORD   j=0;
 112   1         WORD   IntDescrAddr;
 113   1         WORD   ExtDescrAddr;
 114   1      
 115   1         // Initialize Global States
 116   1         Sleep = FALSE;               // Disable sleep mode
 117   1         Rwuen = FALSE;               // Disable remote wakeup
C51 COMPILER V7.07   FW                                                                    03/10/2014 15:19:46 PAGE 3   

 118   1         Selfpwr = FALSE;            // Disable self powered
 119   1         GotSUD = FALSE;               // Clear "Got setup data" flag
 120   1      
 121   1         // Initialize user device
 122   1         TD_Init();
 123   1      
 124   1      //      OEC|=0x01; //PC.0 as output (SYNC signal)
 125   1      //      SYNCDELAY;
 126   1      //      IOC|=0x00; //output 1 on PC.0...SYNC signal is LOW 
 127   1      //      SYNCDELAY;
 128   1      //      OEC|=0x02; //PC.1 as output (SYNC signal)
 129   1      //      SYNCDELAY;
 130   1      //      IOC|=0x00; //output 1 on PC.1...SYNC signal is LOW 
 131   1      //      SYNCDELAY;
 132   1      //      OEC|=0x04; //PC.2 as output (SYNC signal)
 133   1      //      SYNCDELAY;
 134   1      //      IOC|=0x00; //output 1 on PC.2...SYNC signal is LOW
 135   1      //      SYNCDELAY;
 136   1      
 137   1      //      OEA|=0xEF; //Declare PA.7 as input
 138   1      //      SYNCDELAY;
 139   1      
 140   1      
 141   1      
 142   1         // The following section of code is used to relocate the descriptor table. 
 143   1         // Since the SUDPTRH and SUDPTRL are assigned the address of the descriptor 
 144   1         // table, the descriptor table must be located in on-part memory.
 145   1         // The 4K demo tools locate all code sections in external memory.
 146   1         // The descriptor table is relocated by the frameworks ONLY if it is found 
 147   1         // to be located in external memory.
 148   1         pDeviceDscr = (WORD)&DeviceDscr;
 149   1         pDeviceQualDscr = (WORD)&DeviceQualDscr;
 150   1         pHighSpeedConfigDscr = (WORD)&HighSpeedConfigDscr;
 151   1         pFullSpeedConfigDscr = (WORD)&FullSpeedConfigDscr;
 152   1         pStringDscr = (WORD)&StringDscr;
 153   1      
 154   1         if ((WORD)&DeviceDscr & 0xe000)
 155   1         {
 156   2            IntDescrAddr = INTERNAL_DSCR_ADDR;
 157   2            ExtDescrAddr = (WORD)&DeviceDscr;
 158   2            DevDescrLen = (WORD)&UserDscr - (WORD)&DeviceDscr + 2;
 159   2            for (i = 0; i < DevDescrLen; i++)
 160   2               *((BYTE xdata *)IntDescrAddr+i) = 0xCD;
 161   2            for (i = 0; i < DevDescrLen; i++)
 162   2               *((BYTE xdata *)IntDescrAddr+i) = *((BYTE xdata *)ExtDescrAddr+i);
 163   2            pDeviceDscr = IntDescrAddr;
 164   2            offset = (WORD)&DeviceDscr - INTERNAL_DSCR_ADDR;
 165   2            pDeviceQualDscr -= offset;
 166   2            pConfigDscr -= offset;
 167   2            pOtherConfigDscr -= offset;
 168   2            pHighSpeedConfigDscr -= offset;
 169   2            pFullSpeedConfigDscr -= offset;
 170   2            pStringDscr -= offset;
 171   2         }
 172   1      
 173   1         EZUSB_IRQ_ENABLE();            // Enable USB interrupt (INT2)
 174   1         EZUSB_ENABLE_RSMIRQ();            // Wake-up interrupt
 175   1      
 176   1         INTSETUP |= (bmAV2EN | bmAV4EN);     // Enable INT 2 & 4 autovectoring
 177   1      
 178   1         USBIE |= bmSUDAV | bmSUTOK | bmSUSP | bmURES | bmHSGRANT;   // Enable selected interrupts
 179   1         EA = 1;                  // Enable 8051 interrupts
C51 COMPILER V7.07   FW                                                                    03/10/2014 15:19:46 PAGE 4   

 180   1      
 181   1      #ifndef NO_RENUM
 182   1         // Renumerate if necessary.  Do this by checking the renum bit.  If it
 183   1         // is already set, there is no need to renumerate.  The renum bit will
 184   1         // already be set if this firmware was loaded from an eeprom.
 185   1         if(!(USBCS & bmRENUM))
 186   1         {
 187   2             EZUSB_Discon(TRUE);   // renumerate
 188   2         }
 189   1      #endif
 190   1      
 191   1         // unconditionally re-connect.  If we loaded from eeprom we are
 192   1         // disconnected and need to connect.  If we just renumerated this
 193   1         // is not necessary but doesn't hurt anything
 194   1         USBCS &=~bmDISCON;
 195   1      
 196   1         CKCON = (CKCON&(~bmSTRETCH)) | FW_STRETCH_VALUE; // Set stretch to 0 (after renumeration)
 197   1      
 198   1         // clear the Sleep flag.
 199   1         Sleep = FALSE;
 200   1      
 201   1         // Task Dispatcher
 202   1         while(TRUE)               // Main Loop
 203   1         {
 204   2            if(GotSUD)            // Wait for SUDAV
 205   2            {
 206   3               SetupCommand();          // Implement setup command
 207   3                 GotSUD = FALSE;            // Clear SUDAV flag
 208   3            }
 209   2      
 210   2            // Poll User Device
 211   2            // NOTE: Idle mode stops the processor clock.  There are only two
 212   2            // ways out of idle mode, the WAKEUP pin, and detection of the USB
 213   2            // resume state on the USB bus.  The timers will stop and the
 214   2            // processor will not wake up on any other interrupts.
 215   2            if (Sleep)
 216   2                {
 217   3                if(TD_Suspend())
 218   3                    { 
 219   4                    Sleep = FALSE;            // Clear the "go to sleep" flag.  Do it here to prevent any race c
             -ondition between wakeup and the next sleep.
 220   4                    do
 221   4                        {
 222   5                          EZUSB_Susp();         // Place processor in idle mode.
 223   5                        }
 224   4                      while(!Rwuen && EZUSB_EXTWAKEUP());
 225   4                      // Must continue to go back into suspend if the host has disabled remote wakeup
 226   4                      // *and* the wakeup was caused by the external wakeup pin.
 227   4                      
 228   4                   // 8051 activity will resume here due to USB bus or Wakeup# pin activity.
 229   4                   EZUSB_Resume();   // If source is the Wakeup# pin, signal the host to Resume.      
 230   4                   TD_Resume();
 231   4                    }   
 232   3                }
 233   2            TD_Poll();
 234   2         }
 235   1      }
 236          
 237          // Device request parser
 238          void SetupCommand(void)
 239          {
 240   1         void   *dscr_ptr;
C51 COMPILER V7.07   FW                                                                    03/10/2014 15:19:46 PAGE 5   

 241   1      
 242   1         switch(SETUPDAT[1])
 243   1         {
 244   2            case SC_GET_DESCRIPTOR:                  // *** Get Descriptor
 245   2               if(DR_GetDescriptor())
 246   2                  switch(SETUPDAT[3])         
 247   2                  {
 248   3                     case GD_DEVICE:            // Device
 249   3                        SUDPTRH = MSB(pDeviceDscr);
 250   3                        SUDPTRL = LSB(pDeviceDscr);
 251   3                        break;
 252   3                     case GD_DEVICE_QUALIFIER:            // Device Qualifier
 253   3                        SUDPTRH = MSB(pDeviceQualDscr);
 254   3                        SUDPTRL = LSB(pDeviceQualDscr);
 255   3                        break;
 256   3                     case GD_CONFIGURATION:         // Configuration
 257   3                        SUDPTRH = MSB(pConfigDscr);
 258   3                        SUDPTRL = LSB(pConfigDscr);
 259   3                        break;
 260   3                     case GD_OTHER_SPEED_CONFIGURATION:  // Other Speed Configuration
 261   3                        SUDPTRH = MSB(pOtherConfigDscr);
 262   3                        SUDPTRL = LSB(pOtherConfigDscr);
 263   3                        break;
 264   3                     case GD_STRING:            // String
 265   3                        if(dscr_ptr = (void *)EZUSB_GetStringDscr(SETUPDAT[2]))
 266   3                        {
 267   4                           SUDPTRH = MSB(dscr_ptr);
 268   4                           SUDPTRL = LSB(dscr_ptr);
 269   4                        }
 270   3                        else 
 271   3                           EZUSB_STALL_EP0();   // Stall End Point 0
 272   3                        break;
 273   3                     default:            // Invalid request
 274   3                        EZUSB_STALL_EP0();      // Stall End Point 0
 275   3                  }
 276   2               break;
 277   2            case SC_GET_INTERFACE:                  // *** Get Interface
 278   2               DR_GetInterface();
 279   2               break;
 280   2            case SC_SET_INTERFACE:                  // *** Set Interface
 281   2               DR_SetInterface();
 282   2               break;
 283   2            case SC_SET_CONFIGURATION:               // *** Set Configuration
 284   2               DR_SetConfiguration();
 285   2               break;
 286   2            case SC_GET_CONFIGURATION:               // *** Get Configuration
 287   2               DR_GetConfiguration();
 288   2               break;
 289   2            case SC_GET_STATUS:                  // *** Get Status
 290   2               if(DR_GetStatus())
 291   2                  switch(SETUPDAT[0])
 292   2                  {
 293   3                     case GS_DEVICE:            // Device
 294   3                        EP0BUF[0] = ((BYTE)Rwuen << 1) | (BYTE)Selfpwr;
 295   3                        EP0BUF[1] = 0;
 296   3                        EP0BCH = 0;
 297   3                        EP0BCL = 2;
 298   3                        break;
 299   3                     case GS_INTERFACE:         // Interface
 300   3                        EP0BUF[0] = 0;
 301   3                        EP0BUF[1] = 0;
 302   3                        EP0BCH = 0;
C51 COMPILER V7.07   FW                                                                    03/10/2014 15:19:46 PAGE 6   

 303   3                        EP0BCL = 2;
 304   3                        break;
 305   3                     case GS_ENDPOINT:         // End Point
 306   3                        EP0BUF[0] = *(BYTE xdata *) epcs(SETUPDAT[4]) & bmEPSTALL;
 307   3                        EP0BUF[1] = 0;
 308   3                        EP0BCH = 0;
 309   3                        EP0BCL = 2;
 310   3                        break;
 311   3                     default:            // Invalid Command
 312   3                        EZUSB_STALL_EP0();      // Stall End Point 0
 313   3                  }
 314   2               break;
 315   2            case SC_CLEAR_FEATURE:                  // *** Clear Feature
 316   2               if(DR_ClearFeature())
 317   2                  switch(SETUPDAT[0])
 318   2                  {
 319   3                     case FT_DEVICE:            // Device
 320   3                        if(SETUPDAT[2] == 1)
 321   3                           Rwuen = FALSE;       // Disable Remote Wakeup
 322   3                        else
 323   3                           EZUSB_STALL_EP0();   // Stall End Point 0
 324   3                        break;
 325   3                     case FT_ENDPOINT:         // End Point
 326   3                        if(SETUPDAT[2] == 0)
 327   3                        {
 328   4                           *(BYTE xdata *) epcs(SETUPDAT[4]) &= ~bmEPSTALL;
 329   4                           EZUSB_RESET_DATA_TOGGLE( SETUPDAT[4] );
 330   4                        }
 331   3                        else
 332   3                           EZUSB_STALL_EP0();   // Stall End Point 0
 333   3                        break;
 334   3                  }
 335   2               break;
 336   2            case SC_SET_FEATURE:                  // *** Set Feature
 337   2               if(DR_SetFeature())
 338   2                  switch(SETUPDAT[0])
 339   2                  {
 340   3                     case FT_DEVICE:            // Device
 341   3                        if(SETUPDAT[2] == 1)
 342   3                           Rwuen = TRUE;      // Enable Remote Wakeup
 343   3                        else if(SETUPDAT[2] == 2)
 344   3                           // Set Feature Test Mode.  The core handles this request.  However, it is
 345   3                           // necessary for the firmware to complete the handshake phase of the
 346   3                           // control transfer before the chip will enter test mode.  It is also
 347   3                           // necessary for FX2 to be physically disconnected (D+ and D-)
 348   3                           // from the host before it will enter test mode.
 349   3                           break;
 350   3                        else
 351   3                           EZUSB_STALL_EP0();   // Stall End Point 0
 352   3                        break;
 353   3                     case FT_ENDPOINT:         // End Point
 354   3                        *(BYTE xdata *) epcs(SETUPDAT[4]) |= bmEPSTALL;
 355   3                        break;
 356   3                  }
 357   2               break;
 358   2            default:                     // *** Invalid Command
 359   2               if(DR_VendorCmnd())
 360   2                  EZUSB_STALL_EP0();            // Stall End Point 0
 361   2         }
 362   1      
 363   1         // Acknowledge handshake phase of device request
 364   1         EP0CS |= bmHSNAK;
C51 COMPILER V7.07   FW                                                                    03/10/2014 15:19:46 PAGE 7   

 365   1      }
 366          
 367          // Wake-up interrupt handler
 368          void resume_isr(void) interrupt WKUP_VECT
 369          {
 370   1         EZUSB_CLEAR_RSMIRQ();
 371   1      }
 372          
 373          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    980    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
